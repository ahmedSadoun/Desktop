MARIAM_TASK#123

CREATE OR REPLACE PROCEDURE create_emps (p_data  IN  BLOB)
AS
BEGIN
  INSERT INTO employees ( first_name, last_name, email)
    SELECT *
    FROM   json_table(p_data FORMAT JSON, '$.items[*]'
           COLUMNS (
             first_name  VARCHAR2   PATH '$.first_name',
             last_name  VARCHAR2    PATH '$.last_name',
             email  VARCHAR2  PATH '$.email'
             ))j; 
  COMMIT;

EXCEPTION
  WHEN OTHERS THEN
    HTP.print(SQLERRM);
END;

DECLARE
    l_json            json_object_t;
    l_items           json_array_t;
    l_item            json_object_t;
    input_json_array  CLOB;
    id                NUMBER(10);
    first_name        VARCHAR2(400);
    last_name         VARCHAR2(400);
    email             VARCHAR2(400);
    job_id            VARCHAR2(400);
    hire_date         DATE;
    ids               VARCHAR2(3000);
BEGIN
    input_json_array := :body_text;
    l_json := json_object_t.parse(input_json_array);
    l_items := l_json.get_array('items');
    ids := '';
    dbms_output.put_line('1');
    FOR indx IN 0..l_items.get_size - 1 LOOP
        l_item := TREAT(l_items.get(indx) AS json_object_t);
        first_name := l_item.get_string('first_name');
        last_name := l_item.get_string('last_name');
        email := l_item.get_string('email');
        job_id := l_item.get_string('job_id');
        hire_date := '16-AUG-22';
        INSERT INTO employees (
            first_name,
            last_name,
            email,
            job_id,
            hire_date
        ) VALUES (
            first_name,
            last_name,
            email,
            job_id,
            hire_date
        ) RETURN employee_id INTO id;

        ids := ids
               || to_char(id)
               || ', ';
    END LOOP;

    :ids_output := ids;
EXCEPTION
    WHEN OTHERS THEN
        htp.print(sqlerrm);
END;


BEGIN
    INSERT INTO employees (
        first_name,
        last_name,
        email,
        hire_date,
        job_id
    )
        SELECT
            first_name,
            last_name,
            email,
            hire_date,
            job_id
        FROM
            JSON_TABLE ( :p_data FORMAT JSON, '$.items[*]'
                COLUMNS (
                    first_name VARCHAR2 PATH '$.first_name',
                    last_name VARCHAR2 PATH '$.last_name',
                    email VARCHAR2 PATH '$.email',
                    job_id VARCHAR2 PATH '$.job_id'
                )
            );

    COMMIT;
END;


DECLARE
    id             employees.employee_id%TYPE;
    ids            VARCHAR2(3000);
    curs_emp_data  SYS_REFCURSOR;
    first_name        employees.first_name%type;
    last_name        employees.last_name%type;
    email        employees.email%type;
    job_id        employees.job_id%type;
output_ids VARCHAR2(3000);
BEGIN 
OPEN curs_emp_data FOR SELECT
                                 first_name,
                                 last_name,
                                 email,
                                 job_id
                             FROM
                                 JSON_TABLE ( :body_text FORMAT JSON, '$.items[*]'
                                     COLUMNS (
                                         first_name VARCHAR2 PATH '$.first_name',
                                         last_name VARCHAR2 PATH '$.last_name',
                                         email VARCHAR2 PATH '$.email',
                                         job_id VARCHAR2 PATH '$.job_id'
                                     )
                                 );
                                 dbms_output.put_line('11111');

LOOP
    FETCH curs_emp_data INTO first_name, last_name, email, job_id;
    EXIT WHEN ( curs_emp_data%notfound );
    INSERT INTO employees (
        first_name,
        last_name,
        email,
        hire_date,
        job_id
    ) VALUES (
        first_name,
        last_name,
        email,
        '16-AUG-22',
        job_id
    ) RETURNING employee_id INTO id;
COMMIT;
    ids := ids
           || to_char(id)
           || ', ';
END LOOP;

CLOSE curs_emp_data;

dbms_output.put_line(ids);




:output_ids :='the ids just created are :'|| ids;
--dbms_output.put_line(output_ids);
end;
________________________________________________________
--{"conDate":"2023-01-05","users":["CHATBOT","user"],"F_message":{"sender_user_name":"user","messages":["صبح"]}}
DECLARE
    l_json            json_object_t;
    l_users           json_array_t;
    messages          json_array_t;
    TYPE intarray IS
        TABLE OF NUMBER INDEX BY PLS_INTEGER;
    messages_pk_fks   intarray;
    l_user            VARCHAR2(200);
    message           VARCHAR2(200);
    object_json       json_object_t;
    input_json_array  CLOB;
    conv_id           NUMBER(10);
    user_id           NUMBER(10);
    recepiant_id      NUMBER(10);
    mesgid            NUMBER(10);
    conv_date         TIMESTAMP;
    user_message      json_object_t;
BEGIN
-- intialize the collection

    object_json := json_object_t.parse(:body_text);
    l_users := object_json.get_array('users');
    conv_date := to_date(object_json.get_string('conDate'), 'yyyy/mm/dd');
    user_message := object_json.get_object('F_message');
    recepiant_id := -1;
    -- create the conversation
    INSERT INTO conversation ( conv_date ) VALUES ( conv_date ) RETURNING conv_pk INTO conv_id;
        -- create the two end users of the conversation.
    FOR indx IN 0..l_users.get_size - 1 LOOP
        l_user := l_users.get(indx).stringify();
        INSERT INTO conv_users (
            user_name, -- don't forget to create this column
            conv_pk_fk
        ) VALUES (
            l_user,
            conv_id
        ) RETURN user_pk INTO user_id;
        -- so far we are good.
        dbms_output.put_line('the current user is '
                             || to_char(user_message.get_string('sender_user_name'))
                             || ' and the l_user is '
                             || l_user);

        IF l_user = '"'
                    || to_char(user_message.get_string('sender_user_name'))
                    || '"' THEN -- if the first user is the sender then add the messages with its pk.
            dbms_output.put_line('the message is ' || to_char(user_id));
            messages := user_message.get_array('messages'); -- get the messages list
            FOR msgindx IN 0..messages.get_size - 1 LOOP
                message := messages.get(msgindx).stringify();
                dbms_output.put_line('the sender id is ' || to_char(message));
                INSERT INTO messages (
                    user_pk_fk,
                    message
                ) VALUES (
                    user_id,
                    message
                ) RETURN message_pk INTO mesgid;

                messages_pk_fks(msgindx) := mesgid;
            END LOOP;

        ELSE -- and the other one is the recepiant get its pk and the msgs pks to add them later.
            recepiant_id := user_id;
            dbms_output.put_line('the recepiant id is ' || to_char(user_id));
        END IF;

    END LOOP;
    -- loop through the messages ids array. and add the recepiant with the message id.
    FOR msgindx IN 0..messages_pk_fks.count - 1 LOOP
        dbms_output.put_line('the message id is ' || to_char(messages_pk_fks(msgindx)));
        INSERT INTO recepiant (
            user_pk_fk,
            message_pk_fk
        ) VALUES (
            recepiant_id,
            messages_pk_fks(msgindx)
        );

    END LOOP;

    :conversation_id := conv_id;
EXCEPTION
    WHEN OTHERS THEN
        htp.print(sqlerrm);
END;
